{
	"info": {
		"_postman_id": "d65864af-8212-4c98-8b0f-863244b65f92",
		"name": "IPM Decisions DSS API tests",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "MetaDataService",
			"item": [
				{
					"name": "Get field observation schema",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "35436742-5c92-4145-a6e1-2bfab9e5a6f6",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"The response is a Json Schema\",function(){",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[\"$schema\"]).to.eql(\"http://json-schema.org/draft-04/schema#\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{dss_url}}/rest/schema/fieldobservation",
							"host": [
								"{{dss_url}}"
							],
							"path": [
								"rest",
								"schema",
								"fieldobservation"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get DSS schema",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e528ee55-11ac-4352-9795-f8bd33692bd0",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"The response is a Json Schema\",function(){",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[\"$schema\"]).to.eql(\"http://json-schema.org/draft-04/schema\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{dss_url}}/rest/schema/dss",
							"host": [
								"{{dss_url}}"
							],
							"path": [
								"rest",
								"schema",
								"dss"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get model output schema",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4795312f-c6dd-48a9-8c14-c957eccadbac",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"The response is a Json Schema\",function(){",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[\"$schema\"]).to.eql(\"http://json-schema.org/draft-04/schema#\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{dss_url}}/rest/schema/modeloutput",
							"host": [
								"{{dss_url}}"
							],
							"path": [
								"rest",
								"schema",
								"modeloutput"
							]
						}
					},
					"response": []
				},
				{
					"name": "Schema validate model output",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8e6ef308-40fe-4cf0-8f3f-c94c33748a4d",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"The data has been validated\",function(){",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[\"isValid\"]).to.eql(true);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"timeStart\": \"2020-04-30T22:00:00Z\",\n    \"timeEnd\": \"2020-05-02T22:00:00Z\",\n    \"interval\": 86400,\n    \"resultParameters\": [\n        \"TMDD5C\",\n        \"THRESHOLD_1\",\n        \"THRESHOLD_2\",\n        \"TMD5C\",\n        \"TMD\",\n        \"THRESHOLD_3\"\n    ],\n    \"locationResult\": [\n        {\n            \"longitude\": null,\n            \"latitude\": null,\n            \"altitude\": null,\n            \"data\": [\n                [\n                    0.7,\n                    260.0,\n                    360.0,\n                    0.7,\n                    5.7,\n                    560.0\n                ],\n                [\n                    3.9,\n                    260.0,\n                    360.0,\n                    3.2,\n                    8.2,\n                    560.0\n                ],\n                [\n                    7.4,\n                    260.0,\n                    360.0,\n                    3.5,\n                    8.5,\n                    560.0\n                ]\n            ],\n            \"warningStatus\": [\n                2,\n                2,\n                4\n            ],\n            \"length\": 3,\n            \"width\": 6\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{dss_url}}/rest/schema/modeloutput/validate",
							"host": [
								"{{dss_url}}"
							],
							"path": [
								"rest",
								"schema",
								"modeloutput",
								"validate"
							]
						}
					},
					"response": []
				},
				{
					"name": "Schema validate DSS YAML file",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e2e1daee-40ff-4e95-bc4b-dc1e8a781dbc",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"The data has been validated\",function(){",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[\"isValid\"]).to.eql(true);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"content-type": true
						}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-type",
								"value": "application/x-yaml",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "# TEST YAML sample of model meta data to be used by the plaform\n# (c) 2020 Tor-Einar Skog <tor-einar.skog@nibio.no>\n---\n# General info about the DSS\nid: no.nibio.vips\nversion: \"2.0\"\nname: VIPS\nurl: https://www.vips-landbruk.no/\norganization: \n name: NIBIO\n country: Norway\n address: Postboks 115\n postal_code: \"1431\"\n city: Ås\n email: berit.nordskog@nibio.no\n url: https://www.nibio.no/\nlanguages:\n- Norwegian\n- English\n# From here on we get model specific\n# There may be many DSS models per DSS\n# They should have their separate list entry\n# We use EPPO codes (https://gd.eppo.int/)\n# for pests and crops\n# We use these parameters/codes for weather data: \n# https://github.com/H2020-IPM-Decisions/formats/blob/master/weather_data/weather_parameters_draft_v2.yaml\nmodels:\n- name: Carrot rust fly temperature model\n  id: PSILARTEMP\n  version: \"1.0\"\n  authors: # List of the model authors\n  - name: Berit Nordskog\n    email: berit.nordskog@nibio.no\n    organization: NIBIO\n  pests: \n  - PSILRO # EPPO code for carrot rust fly\n  crops:\n  - DAUCS # EPPO code for carrot\n  keywords: foo, bar, mechanistic, regression\n  type_of_decision: Short-term tactical\n  type_of_output: Risk indication\n  description_URL: https://www.vips-landbruk.no/forecasts/models/PSILARTEMP/\n  description: |\n    The warning system model «Carrot rust fly temperature» is based on a Finnish temperature-based model (Markkula et al, 1998; Tiilikkala & Ojanen, 1999; Markkula et al, 2000). The model determines the start of the flight period for the 1st and 2nd generation of carrot rust fly based on accumuleted degree-days (day-degrees) over a base temperature of 5,0 °C. VIPS uses the model for the 1st generation only. \n    Standard air temperature (temperature measured 2 m above ground) is used in the model. Degree-days are defined for this model as the sum of the difference between a base temperature of 5,0 °C and the mean temperature for all days with a temperature >5,0 °C, in other words (daily mean temperature – 5,0 °C) from 1 March (beginning when the ground has thawed).\n  citation: null # Optional. Use the DOI as identifier (list)\n  # Where has this model been considered valid\n  valid_spatial:\n    # Using country codes to get GeoJSON. Saves a lot of duplication.\n    # ISO-3166-1 Three-letter country codes https://en.wikipedia.org/wiki/ISO_3166-1#Current_codes\n    countries:\n      - NOR\n    # Optionally, use a custom polygon\n    geoJSON: |-\n      {}\n  input:\n   weather: \n   - parameter_code: 1002 # = Mean air temp at 2m\n     interval: 86400 # Sampling interval in seconds (3600 * 24 = 86400)\n  execution: \n    type: ONTHEFLY\n    endpoint: https://coremanager.vips.nibio.no/models/PSILARTEMP/run/ipmd\n    form_method: post # Could be get or post\n    content_type: application/json # Regular forms: application/x-www-form-urlencoded , Regular forms with files (<input type=\"file\">): multipart/form-data\n    # The input template should adhere to the JSON Schema standard: https://json-schema.org/\n    input_schema: |\n      {\n        \"type\":\"object\",\n        \"properties\": {\n          \"modelId\": {\"type\": \"string\", \"pattern\":\"^PSILARTEMP$\", \"title\": \"Model Id\", \"default\":\"PSILARTEMP\", \"description\":\"Must be PSILARTEMP\"},\n          \"configParameters\": {\n            \"title\":\"Configuration parameters\",\n            \"type\": \"object\",\n            \"properties\": {\n              \"timeZone\": {\"type\": \"string\", \"title\": \"Time zone (e.g. Europe/Oslo)\", \"default\":\"Europe/Oslo\"},\n              \"timeStart\": {\"type\":\"string\",\"format\": \"date\", \"title\": \"Start date of calculation (YYYY-MM-DD)\"},\n              \"timeEnd\": {\"type\":\"string\",\"format\": \"date\", \"title\": \"End date of calculation (YYYY-MM-DD)\"}\n            },\n            \"required\": [\"timeZone\",\"timeStart\",\"timeEnd\"]\n          },\n          \"weatherData\": {\n            \"$ref\": \"https://ipmdecisions.nibio.no/api/wx/rest/schema/weatherdata\"\n          }\n        },\n        \"required\": [\"modelId\",\"configParameters\"]\n      }\n    # Definition of the result parameters specific for this DSS model\n  output: \n    warning_status_interpretation: |-\n      Green warning indicates that the flight period has not yet begun.\n      Yellow warning indicates that the flight period is beginning and that flies can be coming into the field.\n      Red warning indicates peak flight period.\n      Grey warning indicates that the flight period of the 1st generation is over.\n      Be aware that in areas with field covers (plastic, single or double non-woven covers, etc.) with early crops the preceding season (either on the current field or neighboring fields), the flight period can start earlier due to higher soil temperature under the covers.\n    result_parameters:\n      # the id is used with the model_id as the namespace\n      - id: TMDD5C\n        title: Accumulated day degrees\n        description: The accumulated day degrees with a base temperature of 5 degrees celcius\n########### TODO finish adapt\n- name: Carrot rust fly observation model\n  id: PSILAROBSE\n  version: \"1.0\"\n  authors: # List of the model authors\n  - name: Tor J. Johansen\n    email: tor.johansen@nibio.no\n    organization: NIBIO\n  pests: \n  - PSILRO # EPPO code for carrot rust fly\n  crops:\n  - DAUCS # EPPO code for carrot\n  keywords: foo, bar, mechanistic, regression\n  type_of_decision: Short-term tactical\n  type_of_output: Risk indication\n  description_URL: https://www.vips-landbruk.no/forecasts/models/PSILARTEMP/\n  description: |\n    The warning system model is based on weekly observations of adult carrot rust flies captured on yellow sticky traps. The model is based in its entirety on observations, with no input of weather data or weather forecasts. Traps are placed in the field edge and in the field and are examined for carrot rust flies weekly throughout the season. The number of adult carrot rust flies is registered in VIPS and is used in the warning system model. The observations are compared with the economic threshold levels and a warning is calculated. After organophosphates (which had a good effect against larvae) were removed from the market, they were replaced by pyrethroids that only work against the adult stage. Studies were carried out in 2005 and 2006 to adjust the larval-based thresholds to chemical control of adult flies. The experience from Norway and other countries indicated that the first treatment against carrot rust flies should be done as soon as possible after the first fly is observed on the traps. The threshold that is used in VIPS is therefore at the first observation of 1 fly.\n  citation: null # Optional. Use the DOI as identifier (list)\n  # Where has this model been considered valid\n  valid_spatial:\n    # Using country codes to get GeoJSON. Saves a lot of duplication.\n    # ISO-3166-1 Three-letter country codes https://en.wikipedia.org/wiki/ISO_3166-1#Current_codes\n    countries:\n      - NOR\n    # Optionally, use a custom polygon\n    geoJSON: |-\n      {}\n  input:\n   field_observation:\n    species: \n    - PSILRO # EPPO Code for the disease\n  execution: \n    type: ONTHEFLY\n    endpoint: https://coremanager.vips.nibio.no/models/PSILAROBSE/run/ipmd\n    form_method: post # Could be get or post\n    content_type: application/json # Regular forms: application/x-www-form-urlencoded , Regular forms with files (<input type=\"file\">): multipart/form-data\n    # The input template should adhere to the JSON Schema standard: https://json-schema.org/\n    input_schema: |\n      {\n        \"type\":\"object\",\n        \"properties\": {\n          \"modelId\": {\"type\": \"string\", \"pattern\":\"^PSILAROBSE$\", \"title\": \"Model Id\", \"default\":\"PSILAROBSE\", \"description\":\"Must be PSILAROBSE\"},\n          \"configParameters\": {\n            \"title\":\"Configuration parameters\",\n            \"type\": \"object\",\n            \"properties\": {\n              \"timeZone\": {\"type\": \"string\", \"title\": \"Time zone (e.g. Europe/Oslo)\", \"default\":\"Europe/Oslo\"},\n              \"startDateCalculation\": {\"type\":\"string\",\"format\": \"date\", \"title\": \"Start date of calculation (YYYY-MM-DD)\"},\n              \"endDateCalculation\": {\"type\":\"string\",\"format\": \"date\", \"title\": \"End date of calculation (YYYY-MM-DD)\"},\n              \"fieldObservations\": {\n                \"title\": \"Field observations\",\n                \"type\": \"array\",\n                \"items\": {\n                  \"$ref\": \"https://ipmdecisions.nibio.no/api/dss/rest/schema/fieldobservation\"\n                }\n              },\n              \"fieldObservationQuantifications\": {\n                \"title\": \"Field observation quantifications\",\n                \"type\": \"array\",\n                \"items\": {\n                  \"oneOf\": [\n                    {\n                      \"$ref\": \"#/definitions/fieldObs_PSILRO\"\n                    }\n                  ]\n                }\n              }\n            },\n            \"required\": [\"timeZone\",\"startDateCalculation\",\"endDateCalculation\"]\n          }\n        },\n        \"required\": [\"modelId\",\"configParameters\"],\n        \"definitions\": {\n          \"fieldObs_PSILRO\": {\n            \"title\": \"Psila rosae quantification\", \n            \"properties\": {\n              \"trapCountCropEdge\":{\"title\":\"Insect trap count at the edge of the field\",\"type\":\"integer\"},\n              \"trapCountCropInside\":{\"title\":\"Insect trap count inside the field\",\"type\":\"integer\"}\n            },\n            \"required\": [\"trapCountCropEdge\",\"trapCountCropInside\"]\n          }\n        }\n      }\n    # Definition of the result parameters specific for this DSS model\n  output: \n    warning_status_interpretation: |-\n      Green rectangles indicate that the damage threshold has not been reached and there is no need for treatment.\n\n      Yellow rectangles indicate that carrot rust flies have been caught on traps at the edge of the field and it may be necessary to treat. The field should be checked to evaluate whether treatment is necessary.\n\n      Red rectangles indicate that carrot rust flies have been caught on traps in the field. The field should be checked to evaluate whether treatment is necessary.\n\n      The damage threshold for the first observation on sticky traps is 1 fly. Attack will vary from field to field, we recommend therefore that observations are made in addition in the farmer’s own field. Control measures should be used as soon as possible after the first observation in the farmer’s own field (if the plants are dry, without precipitation and the plants have reached the first true-leaf stage. Consider, based on previous experience and the size and shape of the field whether the entire field or only the border rows should be treated.\n    result_parameters:\n      # the id is used with the model_id as the namespace\n      - id: TRAP_COUNT_CROP_EDGE\n        title: Insect trap count at the edge of the field\n        description: Insect trap count at the edge of the field\n      - id: TRAP_COUNT_CROP_INSIDE\n        title: Insect trap count inside the field\n        description: Insect trap count inside the field\n###########\n- name: Nærstad model\n  id: NAERSTADMO\n  version: \"1.0\"\n  authors: # List of the model authors\n  - name: Ragnhild Nærstad\n    email: ragnhild.naerstad@syngenta.com\n    organization: Syngenta\n  pests:\n  - PHYTIN # EPPO code for Potato late blight (Phytophthora infestans)\n  crops:\n  - SOLTU # EPPO code for potato\n  type_of_decision: Short-term tactical\n  type_of_output: Risk indication\n  description_URL: https://www.vips-landbruk.no/forecasts/models/NAERSTADMO/ \n  description: |\n    The model is based on several years of experiments where trap plants have been placed next to a potato field infected with late blight. Infections on these plants have been correlated with weather conditions the day of exposure, and this is the data the model is based on. The model predicts if there are favourable conditions for spore production and the following spread, survival and infection of these spores. The model produces an infection risk, and a value of 2.5 corresponds to one spot of late blight on each trap plant exposed. This value of 2.5 is the threshold where the model issues a warning.\n  citation: null # Optional. Use the DOI as identifier (list)\n  # Where has this model been considered valid\n  valid_spatial:\n    # Using country codes to get GeoJSON. Saves a lot of duplication.\n    # ISO-3166-1 Three-letter country codes https://en.wikipedia.org/wiki/ISO_3166-1#Current_codes\n    countries:\n      - NOR\n      - SWE\n    # Optionally, use a custom polygon\n    geoJSON: |-\n      {}\n  input:\n   weather: # TODO: weather parameter codes, frequency codes and unit codes\n   - parameter_code: 1002 # = Mean temp at 2m measured in Celcius.\n     interval: 3600 # The least detail accepted (higher frequencies can aggregate to lower)\n   - parameter_code: 2001 # Precipitation measured in mm. \n     interval: 3600 # The least detail accepted (higher frequencies can aggregate to lower)\n   - parameter_code: 5001 # Global radiation in W/sqm. \n     interval: 3600 # The least detail accepted (higher frequencies can aggregate to lower)\n   - parameter_code: 3002 # Relative humidity at 2m in % \n     interval: 3600 # The least detail accepted (higher frequencies can aggregate to lower)\n   - parameter_code: 3101  # Leaf wetness duration. Measured in minutes with wetness per period \n     interval: 3600 # The least detail accepted (higher frequencies can aggregate to lower)\n  execution:\n    type: ONTHEFLY\n    endpoint: https://coremanager.vips.nibio.no/models/NAERSTADMO/run/ipmd\n    form_method: post # Could be get or post\n    content_type: application/json # Regular forms: application/x-www-form-urlencoded , Regular forms with files (<input type=\"file\">): multipart/form-data\n# The input template should adhere to the JSON Schema standard: https://json-schema.org/\n    input_schema: |\n      {\n        \"type\":\"object\",\n        \"properties\": {\n          \"modelId\": {\"type\": \"string\", \"pattern\":\"^NAERSTADMO$\", \"title\": \"Model Id (Must be NAERSTADMO)\", \"default\":\"NAERSTADMO\"},\n          \"configParameters\": {\n            \"type\": \"object\",\n            \"title\":\"Configuration parameters\",\n            \"properties\": {\n              \"timeZone\": {\"type\": \"string\", \"title\": \"Time zone (e.g. Europe/Oslo)\"},\n              \"timeStart\": {\"type\": \"string\",\"format\": \"date\", \"title\": \"Start date of calculation (YYYY-MM-DD)\"},\n              \"timeEnd\": {\"type\": \"string\",\"format\": \"date\", \"title\": \"End date of calculation (YYYY-MM-DD)\"}\n            },\n            \"required\": [\"timeZone\",\"timeStart\",\"timeEnd\"]\n          },\n          \"weatherData\": {\n            \"$ref\": \"https://ipmdecisions.nibio.no/api/wx/rest/schema/weatherdata\"\n          }\n        },\n        \"required\": [\"modelId\",\"configParameters\"]\n      }\n  output: \n    warning_status_interpretation: |-\n      Risk < 1 = no warning (Green)\n      Risk > 1 and < 2,5 = possible warning coming up if conditions persists (Yellow)\n      Risk > 2,5 = warning issued (Red)\n      When a warning is issued, any control measure should be considered based on cultivar resistance, choice of fungicide and time of last application. Risk of infection is highest after several consecutive days with warnings, and especially if late blight has been observed in the area.\n    result_parameters:\n      # the id is used with the model_id as the namespace\n      - id: RISK\n        title: Calculated risk value\n        description: Calculated risk value\n#####\n- name: Alternaria TOMCAST\n  id: ALTERNARIA\n  version: \"1.0\"\n  authors: # List of the model authors\n  - name: Dr R. E. Pitblado\n  pests:\n  - ALTESO # EPPO code for Alternaria solanum\n  crops:\n  - SOLTU # EPPO code for potato\n  type_of_decision: Short-term tactical\n  type_of_output: Risk indication\n  description_URL: https://www.vips-landbruk.no/forecasts/models/ALTERNARIA/ \n  description: |\n    TOMCAST is based on a model that was originally developed for leaf spot diseases in tomato. The model that is used here is tested and adapted to be used against early blight in potato in Denmark (Alternaria solani). The model calculates daily risk values (DSV: Disease Severity Values) based on temperature and leaf wetness the previous day. DSV represents the risk of attack of early blight the previous 24 hours. Daily values of DSV are accumulated until a threshold value is reached, and treatment is recommended. When a spray is performed and entered into the model, accumulation of DSV is reset and starts over at 0.\n  citation: null # Optional. Use the DOI as identifier (list)\n  # Where has this model been considered valid\n  valid_spatial:\n    # Using country codes to get GeoJSON. Saves a lot of duplication.\n    # ISO-3166-1 Three-letter country codes https://en.wikipedia.org/wiki/ISO_3166-1#Current_codes\n    countries:\n      - NOR\n    # Optionally, use a custom polygon\n    geoJSON: |-\n      {}\n  input:\n   weather: # TODO: weather parameter codes, frequency codes and unit codes\n   - parameter_code: 1002 # = Mean temp at 2m measured in Celcius.\n     interval: 3600 # The least detail accepted (higher frequencies can aggregate to lower)\n   - parameter_code: 3101  # Leaf wetness duration. Measured in minutes with wetness per period \n     interval: 3600 # The least detail accepted (higher frequencies can aggregate to lower)\n  execution:\n    type: ONTHEFLY\n    endpoint: https://coremanager.vips.nibio.no/models/ALTERNARIA/run/ipmd\n    form_method: post # Could be get or post\n    content_type: application/json # Regular forms: application/x-www-form-urlencoded , Regular forms with files (<input type=\"file\">): multipart/form-data\n# The input template should adhere to the JSON Schema standard: https://json-schema.org/\n    input_schema: |\n      {\n        \"type\":\"object\",\n        \"properties\": {\n          \"modelId\": {\"type\": \"string\", \"pattern\":\"^ALTERNARIA$\", \"title\": \"Model Id (Must be ALTERNARIA)\", \"default\":\"ALTERNARIA\"},\n          \"configParameters\": {\n            \"type\": \"object\",\n            \"title\":\"Configuration parameters\",\n            \"properties\": {\n              \"timeZone\": {\"type\": \"string\", \"title\": \"Time zone (e.g. Europe/Oslo)\"},\n              \"timeStart\": {\"type\": \"string\",\"format\": \"date\", \"title\": \"Start date of calculation (YYYY-MM-DD)\"},\n              \"timeEnd\": {\"type\": \"string\",\"format\": \"date\", \"title\": \"End date of calculation (YYYY-MM-DD)\"},\n              \"sprayingDates\": {\"type\": \"array\", \"minItems\":0, \"maxItems\":3, \"title\": \"Spraying dates\",\"items\":{\"type\":\"string\",\"format\":\"date\"}}\n            },\n            \"required\": [\"timeZone\",\"timeStart\",\"timeEnd\"]\n          },\n          \"weatherData\": {\n            \"$ref\": \"https://ipmdecisions.nibio.no/api/wx/rest/schema/weatherdata\"\n          }\n        },\n        \"required\": [\"modelId\",\"configParameters\"]\n      }\n  output: \n    warning_status_interpretation: |-\n      The model will be green (no risk) until it reaches 15. From this value the warning will be yellow (possible risk) until the threshold is reached, and the warning turns red (risk of infection).\n    result_parameters:\n      # the id is used with the model_id as the namespace\n      - id: DSV_SUM\n        title: Aggregated Daily Disease Severity Value\n        description: The aggregated risk\n#####\n- name: Negative prognosis\n  id: NEGPROGMOD\n  version: \"1.0\"\n  authors: # List of the model authors\n  - name: Ullrich J. & H. Schrödter\n  pests:\n  - PHYTIN # EPPO code for Alternaria solanum\n  crops:\n  - SOLTU # EPPO code for potato\n  type_of_decision: Short-term tactical\n  type_of_output: Risk indication\n  description_URL: https://www.vips-landbruk.no/forecasts/models/NEGPROGMOD/ \n  description: |\n    From a specific date (50% germination), daily risk values are accumulated based on weather data (temperature, relative humidity and precipitation). The risk is an accumulated value of how the weather affects late blight germination/infection, sporulation and growth. Alle processes are corrected for inhibition due to drying. After the accumulated risk has reached a certain limit (150), there will be an infection risk if there is one day with high infection risk. This model is together with time of row closure, used to decide the timing of first spray against potato late blight.\n  citation: null # Optional. Use the DOI as identifier (list)\n  # Where has this model been considered valid\n  valid_spatial:\n    # Using country codes to get GeoJSON. Saves a lot of duplication.\n    # ISO-3166-1 Three-letter country codes https://en.wikipedia.org/wiki/ISO_3166-1#Current_codes\n    countries:\n      - NOR\n    # Optionally, use a custom polygon\n    geoJSON: |-\n      {}\n  input:\n   weather: # TODO: weather parameter codes, frequency codes and unit codes\n   - parameter_code: 1002 # = Mean temp at 2m measured in Celcius.\n     interval: 3600 # The least detail accepted (higher frequencies can aggregate to lower)\n   - parameter_code: 2001  # Precipitation\n     interval: 3600 # The least detail accepted (higher frequencies can aggregate to lower)\n   - parameter_code: 3002 # Mean relative humidity (%)\n     interval: 3600\n  execution:\n    type: ONTHEFLY\n    endpoint: https://coremanager.vips.nibio.no/models/NEGPROGMOD/run/ipmd\n    form_method: post # Could be get or post\n    content_type: application/json # Regular forms: application/x-www-form-urlencoded , Regular forms with files (<input type=\"file\">): multipart/form-data\n# The input template should adhere to the JSON Schema standard: https://json-schema.org/\n    input_schema: |\n      {\n        \"type\":\"object\",\n        \"properties\": {\n          \"modelId\": {\"type\": \"string\", \"pattern\":\"^NEGPROGMOD$\", \"title\": \"Model Id (Must be NEGPROGMOD)\", \"default\":\"NEGPROGMOD\"},\n          \"configParameters\": {\n            \"type\": \"object\",\n            \"title\":\"Configuration parameters\",\n            \"properties\": {\n              \"timeZone\": {\"type\": \"string\", \"title\": \"Time zone (e.g. Europe/Oslo)\"},\n              \"timeStart\": {\"type\": \"string\",\"format\": \"date\", \"title\": \"Start date of calculation (YYYY-MM-DD)\"},\n              \"timeEnd\": {\"type\": \"string\",\"format\": \"date\", \"title\": \"End date of calculation (YYYY-MM-DD)\"}\n            },\n            \"required\": [\"timeZone\",\"timeStart\",\"timeEnd\"]\n          },\n          \"weatherData\": {\n            \"$ref\": \"https://ipmdecisions.nibio.no/api/wx/rest/schema/weatherdata\"\n          }\n        },\n        \"required\": [\"modelId\",\"configParameters\"]\n      }\n  output: \n    warning_status_interpretation: |-\n      When accumulated risk < 150, warning symbol is green\n\n      When accumulated risk > 150, warning symbol is yellow if the daily risk is below 7 and red if it is above 7\n\n      When a late blight warning has been issued, cultivar suseptibility, selection of fungicide and time of application should be considered before spraying. Risk of getting an infection is highest if warnings are issued two days ore more in a row, and when late blight has been observed in the area. \n    result_parameters:\n      # the id is used with the model_id as the namespace\n      - id: AGGREGATED_CONTRIB\n        title: Aggregated infection risk\n        description: The aggregated risk\n      - id: INFECTION_THRESHOLD\n        title: Infection threshold\n        description: Threshold for \"High infection risk\"\n#####\n- name: Septoria apiicola model\n  id: SEPAPIICOL\n  version: \"1.0\"\n  authors: # List of the model authors\n  - name: Berit Nordskog\n    email: berit.nordskog@nibio.no\n    organization: NIBIO\n  - name: Arne Hermansen\n    email: arne.hermansen@nibio.no\n    organization: NIBIO\n  pests: \n  - SEPTAP # EPPO code for the disease\n  crops:\n  - APUGD # EPPO code for celery\n  type_of_decision: Short-term tactical\n  type_of_output: Risk indication\n  description_URL: https://www.vips-landbruk.no/forecasts/models/SEPAPIICOL/\n  description: |\n    This model is based on a calculation of how leaf wetness periods influence infection of celery by Septoria apiicola in susceptible host plants.\n    \n    Forecasts of infection risk are given after a minimum of 12 consecutive hours of leaf wetness. The wet periods are calculated from sensors placed 30 cm above ground. If such a sensor is not available, data from leaf wetness sensors placed 2 m above ground are used.\n    \n    The model is developed in Michigan, USA and published by Lacy, 1994.\n    \n    It is generally assumed that this model has additional relevance for Septoria petroselini in parsley.\n  citation: null # Optional. Use the DOI as identifier (list)\n  # Where has this model been considered valid\n  valid_spatial:\n    # Using country codes to get GeoJSON. Saves a lot of duplication.\n    # ISO-3166-1 Three-letter country codes https://en.wikipedia.org/wiki/ISO_3166-1#Current_codes\n    countries:\n      - NOR\n    # Optionally, use a custom polygon\n    geoJSON: |-\n      {}\n  input:\n   weather: # TODO: weather parameter codes, frequency codes and unit codes\n   - parameter_code: 3101  # Leaf wetness duration. Measured in minutes with wetness per period \n     interval: 3600\n   - parameter_code: 1002 # = Mean temp at 2m measured in Celcius.\n     interval: 3600 # The least detail accepted (higher frequencies can aggregate to lower)\n   - parameter_code: 2001  # Precipitation\n     interval: 3600 # The least detail accepted (higher frequencies can aggregate to lower)\n   - parameter_code: 3002 # Mean relative humidity (%)\n     interval: 3600\n   field_observation:\n    species: \n    - SEPTAP # EPPO Code for the disease\n  execution:\n    type: ONTHEFLY # [ONTHEFLY, BATCH, TICKET]\n    endpoint: https://coremanager.vips.nibio.no/models/SEPAPIICOL/run/ipmd\n    form_method: post # Could be get or post\n    content_type: application/json # Regular forms: application/x-www-form-urlencoded , Regular forms with files (<input type=\"file\">): multipart/form-data\n# The input template should adhere to the JSON Schema standard: https://json-schema.org/\n    input_schema: |\n      {\n        \"type\":\"object\",\n        \"properties\": {\n          \"modelId\": {\"type\": \"string\", \"pattern\":\"^SEPAPIICOL$\", \"title\": \"Model Id (Must be SEPAPIICOL)\", \"default\":\"SEPAPIICOL\"},\n          \"configParameters\": {\n            \"title\":\"Configuration parameters\",\n            \"type\": \"object\",\n            \"properties\": {\n              \"timeZone\": {\"type\": \"string\", \"title\": \"Time zone (e.g. Europe/Oslo)\"},\n              \"startDateGrowth\": {\"type\": \"string\", \"format\":\"date\", \"title\": \"Start date of growth (YYYY-MM-DD)\"},\n              \"endDateCalculation\": {\"type\": \"string\", \"format\":\"date\", \"title\": \"End date of calculation (YYYY-MM-DD)\"},\n              \"fieldObservations\": {\n                \"title\": \"Field observations\",\n                \"type\": \"array\",\n                \"items\": {\n                  \"$ref\": \"https://ipmdecisions.nibio.no/api/dss/rest/schema/fieldobservation\"\n                }\n              },\n              \"fieldObservationQuantifications\": {\n                \"title\": \"Field observation quantifications\",\n                \"type\": \"array\",\n                \"items\": {\n                  \"oneOf\": [\n                    {\n                      \"$ref\": \"#/definitions/fieldObs_SEPTAP\"\n                    }\n                  ]\n                }\n              }\n            },\n            \"required\": [\"timeZone\",\"startDateGrowth\",\"endDateCalculation\"]\n          },\n          \"weatherData\": {\n            \"$ref\": \"https://ipmdecisions.nibio.no/api/wx/rest/schema/weatherdata\"\n          }\n        },\n        \"required\": [\"modelId\",\"configParameters\"],\n        \"definitions\": {\n          \"fieldObs_SEPTAP\": {\"title\": \"Septoria apiicola quantification\", \"properties\": {\"observed\":{\"title\":\"observed\", \"type\":\"boolean\"}}}\n        }\n      }\n  output: \n    warning_status_interpretation: |-\n      Green = No risk of infection.\n      Yellow = Weather conditions favorable for infection risk. No known sources of inoculum in the region.\n      Red = Risk of infection and infections of Septoria late blight has been reported in the nearby region. Disease reports and field inspections are performed in collaboration with advisors in the Norwegian Agricultural Advisory service.\n    result_parameters:\n      # the id is used with the model_id as the namespace\n      - id: WET_DAY\n        title: Was this a wet day\n        description: Based on leaf wetness measurements\n      - id: PEST_OBSERVED\n        title: Has the pest been observed in or near the field, or in the nearby region\n        description: Without this, the warning status will never exceed yellow status\n##########\n- name: Bremia lactucae (Downy mildew of lettuce) model\n  id: BREMIALACT\n  version: \"1.0\"\n  authors: # List of the model authors\n  - name: Berit Nordskog\n    email: berit.nordskog@nibio.no\n    organization: NIBIO\n  pests: \n  - BREMLA # EPPO code for Downy mildew of lettuce\n  crops:\n  - 1LACG # EPPO code for the genus Lactuca\n  keywords: none\n  type_of_decision: Short-term tactical\n  type_of_output: Risk indication\n  description_URL: https://www.vips-landbruk.no/forecasts/models/BREMIALACT/\n  description: |\n    TODO\n  citation: null # Optional. Use the DOI as identifier (list)\n  # Where has this model been considered valid\n  valid_spatial:\n    # Using country codes to get GeoJSON. Saves a lot of duplication.\n    # ISO-3166-1 Three-letter country codes https://en.wikipedia.org/wiki/ISO_3166-1#Current_codes\n    countries:\n      - NOR\n    # Optionally, use a custom polygon\n    geoJSON: |-\n      {}\n  input:\n   weather: \n   - parameter_code: 1002 # = Mean air temp at 2m\n     interval: 86400 # Sampling interval in seconds (3600 * 24 = 86400)\n  execution: \n    type: ONTHEFLY\n    endpoint: https://coremanager.vips.nibio.no/models/run/ipmd\n    form_method: post # Could be get or post\n    content_type: application/json # Regular forms: application/x-www-form-urlencoded , Regular forms with files (<input type=\"file\">): multipart/form-data\n    # The input template should adhere to the JSON Schema standard: https://json-schema.org/\n    input_schema: |\n      {\n        \"type\":\"object\",\n        \"properties\": {\n          \"modelId\": {\"type\": \"string\", \"pattern\":\"^PSILARTEMP$\", \"title\": \"Model Id\", \"default\":\"PSILARTEMP\", \"description\":\"Must be PSILARTEMP\"},\n          \"configParameters\": {\n            \"title\":\"Configuration parameters\",\n            \"type\": \"object\",\n            \"properties\": {\n              \"timeZone\": {\"type\": \"string\", \"title\": \"Time zone (e.g. Europe/Oslo)\", \"default\":\"Europe/Oslo\"},\n              \"timeStart\": {\"type\":\"string\",\"format\": \"date\", \"title\": \"Start date of calculation (YYYY-MM-DD)\"},\n              \"timeEnd\": {\"type\":\"string\",\"format\": \"date\", \"title\": \"End date of calculation (YYYY-MM-DD)\"}\n            },\n            \"required\": [\"timeZone\",\"timeStart\",\"timeEnd\"]\n          },\n          \"weatherData\": {\n            \"$ref\": \"https://ipmdecisions.nibio.no/api/wx/rest/schema/weatherdata\"\n          }\n        },\n        \"required\": [\"modelId\",\"configParameters\"]\n      }\n    # Definition of the result parameters specific for this DSS model\n  output: \n    warning_status_interpretation: |-\n      Downy mildew in lettuce normally occurs in the second half of the summer, and not every year in lettuce producing regions.\n      Thus, spraying should only be considered after considering the likelihood of the disease being present.\n      When the model indicates a high risk of infection, spraying should be considered given a) the likelihoold of the disease being present,\n      given the time in the season, b) the lettuce variant's resilience towards the disease and c) the time since the last spraying.\n      Normally you don't spray more often than every 10th day, but if the infection risk is considered high over a longer period and \n      actual field observations being made, one can consider a new treatment as early as 7 days since the last spraying.\n    result_parameters:\n      # the id is used with the model_id as the namespace\n      - id: TXD\n        title: Maximum daily temperature\n        description: The maximum daily temperature\n      - id: ELWAST\n        title: Was there enough leaf wetness after sunrise today\n        description: Was there enough leaf wetness after sunrise today\n      - id: ELWASYBST\n        title: Was there enough relative humidity after sunrise yesterday and befor sunrise today\n        description: Was there enough relative humidity after sunrise yesterday and befor sunrise today\n      - id: SLN\n        title: Was there sporulation last night\n        description: Was there sporulation last night\n      - id: SYN\n        title: Was there sporulation yesterday night\n        description: Was there sporulation yesterday night\n      - id: TXD_THRESHOLD\n        title: Max threshold for temperature for infection\n        description: If the max temperature is above this threshold, infection does not occur",
							"options": {
								"raw": {
									"language": "text"
								}
							}
						},
						"url": {
							"raw": "{{dss_url}}/rest/schema/dss/yaml/validate",
							"host": [
								"{{dss_url}}"
							],
							"path": [
								"rest",
								"schema",
								"dss",
								"yaml",
								"validate"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Catalogue service",
			"item": [
				{
					"name": "Get list of DSSs",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "cba7f4c6-08c2-4ea9-b46f-afb0d397a574",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{dss_url}}/rest/dss",
							"host": [
								"{{dss_url}}"
							],
							"path": [
								"rest",
								"dss"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get one DSS as Json",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "97fef870-cc66-484a-898b-3688d619695b",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Response is Json, and the correct id is present\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.id).to.eql(\"no.nibio.vips\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{dss_url}}/rest/dss/no.nibio.vips",
							"host": [
								"{{dss_url}}"
							],
							"path": [
								"rest",
								"dss",
								"no.nibio.vips"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get input_schema (Json schema) for a DSS model",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8ddb7048-d0a9-4801-b23c-50c442c3de8d",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Response is Json, and we find the data type of the modelId\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.properties.modelId.type).to.eql(\"string\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{dss_url}}/rest/model/no.nibio.vips/PSILARTEMP/input_schema",
							"host": [
								"{{dss_url}}"
							],
							"path": [
								"rest",
								"model",
								"no.nibio.vips",
								"PSILARTEMP",
								"input_schema"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get one DSS as YAML",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c1f64a86-fdf2-4c58-a96a-53f4e8d1536e",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Body contains the correct ID\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"no.nibio.vips\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{dss_url}}/rest/dss/no.nibio.vips/yaml",
							"host": [
								"{{dss_url}}"
							],
							"path": [
								"rest",
								"dss",
								"no.nibio.vips",
								"yaml"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		}
	],
	"protocolProfileBehavior": {}
}