{
	"info": {
		"_postman_id": "d65864af-8212-4c98-8b0f-863244b65f92",
		"name": "IPM Decisions DSS API tests",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "MetaDataService",
			"item": [
				{
					"name": "Get field observation schema",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"The response is a Json Schema\",function(){",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[\"$schema\"]).to.eql(\"http://json-schema.org/draft-04/schema#\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{dss_url}}/rest/schema/fieldobservation",
							"host": [
								"{{dss_url}}"
							],
							"path": [
								"rest",
								"schema",
								"fieldobservation"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get DSS schema",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"The response is a Json Schema\",function(){",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[\"$schema\"]).to.eql(\"http://json-schema.org/draft-04/schema\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{dss_url}}/rest/schema/dss",
							"host": [
								"{{dss_url}}"
							],
							"path": [
								"rest",
								"schema",
								"dss"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get model output schema",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"The response is a Json Schema\",function(){",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[\"$schema\"]).to.eql(\"http://json-schema.org/draft-04/schema#\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{dss_url}}/rest/schema/modeloutput",
							"host": [
								"{{dss_url}}"
							],
							"path": [
								"rest",
								"schema",
								"modeloutput"
							]
						}
					},
					"response": []
				},
				{
					"name": "Schema validate model output",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"The data has been validated\",function(){",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[\"isValid\"]).to.eql(true);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"timeStart\": \"2020-04-30T22:00:00Z\",\n    \"timeEnd\": \"2020-05-02T22:00:00Z\",\n    \"interval\": 86400,\n    \"resultParameters\": [\n        \"TMDD5C\",\n        \"THRESHOLD_1\",\n        \"THRESHOLD_2\",\n        \"TMD5C\",\n        \"TMD\",\n        \"THRESHOLD_3\"\n    ],\n    \"locationResult\": [\n        {\n            \"longitude\": null,\n            \"latitude\": null,\n            \"altitude\": null,\n            \"data\": [\n                [\n                    0.7,\n                    260.0,\n                    360.0,\n                    0.7,\n                    5.7,\n                    560.0\n                ],\n                [\n                    3.9,\n                    260.0,\n                    360.0,\n                    3.2,\n                    8.2,\n                    560.0\n                ],\n                [\n                    7.4,\n                    260.0,\n                    360.0,\n                    3.5,\n                    8.5,\n                    560.0\n                ]\n            ],\n            \"warningStatus\": [\n                2,\n                2,\n                4\n            ],\n            \"length\": 3,\n            \"width\": 6\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{dss_url}}/rest/schema/modeloutput/validate",
							"host": [
								"{{dss_url}}"
							],
							"path": [
								"rest",
								"schema",
								"modeloutput",
								"validate"
							]
						}
					},
					"response": []
				},
				{
					"name": "Schema validate DSS YAML file",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"The data has been validated\",function(){",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[\"isValid\"]).to.eql(true);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"content-type": true
						}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-type",
								"value": "application/x-yaml",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "# YAML sample of model meta data to be used by the plaform\n# (c) 2021 Tor-Einar Skog <tor-einar.skog@nibio.no>\n---\n# General info about the DSS\nid: no.nibio.vips\nversion: \"2.0\"\nname: VIPS\nurl: https://www.vips-landbruk.no/\norganization: \n name: NIBIO\n country: Norway\n address: Postboks 115\n postal_code: \"1431\"\n city: Ås\n email: berit.nordskog@nibio.no\n url: https://www.nibio.no/\nlanguages:\n- Norwegian\n- English\n# From here on we get model specific\n# There may be many DSS models per DSS\n# They should have their separate list entry\n# We use EPPO codes (https://gd.eppo.int/)\n# for pests and crops\n# We use these parameters/codes for weather data: \n# https://github.com/H2020-IPM-Decisions/formats/blob/master/weather_data/weather_parameters_draft_v2.yaml\nmodels:\n- name: Carrot rust fly temperature model\n  id: PSILARTEMP\n  version: \"1.0\"\n  authors: # List of the model authors\n  - name: Berit Nordskog\n    email: berit.nordskog@nibio.no\n    organization: NIBIO\n  pests: \n  - PSILRO # EPPO code for carrot rust fly\n  crops:\n  - DAUCS # EPPO code for carrot\n  keywords: none\n  type_of_decision: Short-term tactical\n  type_of_output: Risk indication\n  description_URL: https://www.vips-landbruk.no/forecasts/models/PSILARTEMP/\n  description: |\n    The warning system model «Carrot rust fly temperature» is based on a Finnish temperature-based model (Markkula et al, 1998; Tiilikkala & Ojanen, 1999; Markkula et al, 2000). The model determines the start of the flight period for the 1st and 2nd generation of carrot rust fly based on accumuleted degree-days (day-degrees) over a base temperature of 5,0 °C. VIPS uses the model for the 1st generation only. \n    Standard air temperature (temperature measured 2 m above ground) is used in the model. Degree-days are defined for this model as the sum of the difference between a base temperature of 5,0 °C and the mean temperature for all days with a temperature >5,0 °C, in other words (daily mean temperature – 5,0 °C) from 1 March (beginning when the ground has thawed).\n  citation: null # Optional. Use the DOI as identifier (list)\n  # Where has this model been considered valid\n  valid_spatial:\n    # Using country codes to get GeoJSON. Saves a lot of duplication.\n    # ISO-3166-1 Three-letter country codes https://en.wikipedia.org/wiki/ISO_3166-1#Current_codes\n    countries:\n      - NOR\n    # Optionally, use a custom polygon\n    geoJSON: |-\n      {}\n  input:\n   weather_parameters: \n   - parameter_code: 1002 # = Mean air temp at 2m\n     interval: 86400 # Sampling interval in seconds (3600 * 24 = 86400)\n   weather_data_period_start: # DEFAULT is FIXED_DATE=XXXX-01-01\n     determined_by: INPUT_SCHEMA_PROPERTY ## Could be INPUT_SCHEMA_PROPERTY or FIXED_DATE\n     value: configParameters.timeStart ## Could be path.to.property OR e.g. XXXX-01-01\n   weather_data_period_end: # DEFAULT is FIXED_DATE=XXXX-12-31\n     determined_by: INPUT_SCHEMA_PROPERTY ## Could be INPUT_SCHEMA_PROPERTY or FIXED_DATE\n     value: configParameters.timeEnd ## Could be path.to.property OR e.g. XXXX-12-31\n  execution: \n    type: ONTHEFLY\n    endpoint: https://coremanager.vips.nibio.no/models/PSILARTEMP/run/ipmd\n    form_method: post # Could be get or post\n    content_type: application/json # Regular forms: application/x-www-form-urlencoded , Regular forms with files (<input type=\"file\">): multipart/form-data\n    input_schema_hidden_properties:\n      - modelId\n    # The input template should adhere to the JSON Schema standard: https://json-schema.org/\n    input_schema: |\n      {\n        \"type\":\"object\",\n        \"properties\": {\n          \"modelId\": {\"type\": \"string\", \"pattern\":\"^PSILARTEMP$\", \"title\": \"Model Id\", \"default\":\"PSILARTEMP\", \"description\":\"Must be PSILARTEMP\"},\n          \"configParameters\": {\n            \"title\":\"Configuration parameters\",\n            \"type\": \"object\",\n            \"properties\": {\n              \"timeZone\": {\"type\": \"string\", \"title\": \"Time zone (e.g. Europe/Oslo)\", \"default\":\"Europe/Oslo\"},\n              \"timeStart\": {\"type\":\"string\",\"format\": \"date\", \"title\": \"Start date of calculation (YYYY-MM-DD)\"},\n              \"timeEnd\": {\"type\":\"string\",\"format\": \"date\", \"title\": \"End date of calculation (YYYY-MM-DD)\"}\n            },\n            \"required\": [\"timeZone\",\"timeStart\",\"timeEnd\"]\n          },\n          \"weatherData\": {\n            \"$ref\": \"https://ipmdecisions.nibio.no/api/wx/rest/schema/weatherdata\"\n          }\n        },\n        \"required\": [\"modelId\",\"configParameters\"]\n      }\n    # Definition of the result parameters specific for this DSS model\n  output: \n    warning_status_interpretation: |-\n      Green warning indicates that the flight period has not yet begun.\n      Yellow warning indicates that the flight period is beginning and that flies can be coming into the field.\n      Red warning indicates peak flight period.\n      Grey warning indicates that the flight period of the 1st generation is over.\n      Be aware that in areas with field covers (plastic, single or double non-woven covers, etc.) with early crops the preceding season (either on the current field or neighboring fields), the flight period can start earlier due to higher soil temperature under the covers.\n    result_parameters:\n      # the id is used with the model_id as the namespace\n      - id: TMDD5C\n        title: Accumulated day degrees\n        description: The accumulated day degrees with a base temperature of 5 degrees celcius\n##\n- name: Cabbage fly flight period temperature model\n  id: DELIARADIC\n  version: \"1.0\"\n  authors: # List of the model authors\n  - name: Tor Johansen\n    email: tor.johansen@nibio.no\n    organization: NIBIO\n  pests: \n  - HYLERA # EPPO code for Cabbage Fly\n  crops:\n  - 1BRSG # EPPO code for the Brassica Genus\n  keywords: none\n  type_of_decision: Short-term tactical\n  type_of_output: Risk indication\n  description_URL: https://www.vips-landbruk.no/forecasts/models/DELIARADIC/\n  description: |\n    The model determines the flight period. It gives information about the expected time of the first \n    oviposition and continued oviposition of the cabbage maggot in cruciferous crops. The model only \n    applies for cabbage maggot, not turnip fly.\n\n    Be aware that in areas with field covers (plastic, single or double non-woven covers, etc.) with \n    early crops the preceding season (either on the current field or neighboring fields), the flight \n    period can start earlier due to higher soil temperature under the covers.\n\n    This model should be used in combination with direct observations of eggs in the field. This is \n    due to large variability and to get an idea of the severity of attack.\n  citation: null # Optional. Use the DOI as identifier (list)\n  # Where has this model been considered valid\n  valid_spatial:\n    # Using country codes to get GeoJSON. Saves a lot of duplication.\n    # ISO-3166-1 Three-letter country codes https://en.wikipedia.org/wiki/ISO_3166-1#Current_codes\n    countries:\n      - NOR\n    # Optionally, use a custom polygon\n    geoJSON: |-\n      {}\n  input:\n   weather_parameters: \n   - parameter_code: 1002 # = Mean air temp at 2m\n     interval: 86400 # Sampling interval in seconds (3600 * 24 = 86400)\n   - parameter_code: 1112 # Mean soil temp at 10cm depth\n     interval: 86400 # Sampling interval in seconds (3600 * 24 = 86400)\n   weather_data_period_start: # DEFAULT is FIXED_DATE=XXXX-01-01\n     determined_by: INPUT_SCHEMA_PROPERTY ## Could be INPUT_SCHEMA_PROPERTY or FIXED_DATE\n     value: configParameters.timeStart ## Could be path.to.property OR e.g. XXXX-01-01\n   weather_data_period_end: # DEFAULT is FIXED_DATE=XXXX-12-31\n     determined_by: INPUT_SCHEMA_PROPERTY ## Could be INPUT_SCHEMA_PROPERTY or FIXED_DATE\n     value: configParameters.timeEnd ## Could be path.to.property OR e.g. XXXX-12-31\n  execution: \n    type: ONTHEFLY\n    endpoint: https://coremanager.vips.nibio.no/models/DELIARADIC/run/ipmd\n    form_method: post # Could be get or post\n    content_type: application/json # Regular forms: application/x-www-form-urlencoded , Regular forms with files (<input type=\"file\">): multipart/form-data\n    # The input template should adhere to the JSON Schema standard: https://json-schema.org/\n    input_schema_hidden_properties:\n      - modelId\n    input_schema: |\n      {\n        \"type\":\"object\",\n        \"properties\": {\n          \"modelId\": {\"type\": \"string\", \"pattern\":\"^DELIARADIC$\", \"title\": \"Model Id\", \"default\":\"DELIARADIC\", \"description\":\"Must be DELIARADIC\"},\n          \"configParameters\": {\n            \"title\":\"Configuration parameters\",\n            \"type\": \"object\",\n            \"properties\": {\n              \"timeZone\": {\"type\": \"string\", \"title\": \"Time zone (e.g. Europe/Oslo)\", \"default\":\"Europe/Oslo\"},\n              \"timeStart\": {\"type\": \"string\",\"format\": \"date\", \"title\": \"Start date of calculation (YYYY-MM-DD)\"},\n              \"timeEnd\": {\"type\": \"string\",\"format\": \"date\", \"title\": \"End date of calculation (YYYY-MM-DD)\"}\n            },\n            \"required\": [\"timeZone\"]\n          },\n          \"weatherData\": {\n            \"$ref\": \"https://ipmdecisions.nibio.no/api/wx/rest/schema/weatherdata\"\n          }\n        },\n        \"required\": [\"modelId\",\"configParameters\"]\n      }\n    # Definition of the result parameters specific for this DSS model\n  output: \n    warning_status_interpretation: |-\n      Green warning indicates that the flight period has not yet begun and oviposition is not expected.\n      Yellow warning indicates that the flight period is beginning and that the first oviposition is close. Check for eggs in the field.\n      Red warning indicates that it is likely that oviposition has begun. The requirement for the flight period has been reached.\n      Grey warning indicates that the flight period of the 1st generation is over and the warning has ended.\n    ### Experimental fields!!! (adding chart parameters)\n    chart_heading: Day degrees\n    result_parameters:\n      # the id is used with the model_id as the namespace\n      - id: TMDD4C\n        title: Accumulated air temperature day degrees \n        description: The accumulated soil temperature day degrees with a base temperature of 4 degrees celcius\n        chart_info:\n          default_visible: true\n          unit: \"&deg;C\"\n          chart_type: spline # Could be  line, spline, area, areaspline, column and scatter. Ref https://www.highcharts.com/docs/chart-and-series-types/chart-types\n          color: \"#0066ff\"\n      - id: TJM10DD4C\n        title: Accumulated soil temperature day degrees \n        description: The accumulated soil temperature day degrees with a base temperature of 4 degrees celcius\n        chart_info:\n          default_visible: false\n          unit: \"&deg;C\"\n          chart_type: spline \n          color: \"#00ccff\"\n      - id: TMDD4CLT\n        title: Lower threshold value for TMDD4C\n        description: When this threshold is reached, the flight period is beginning and the first oviposition is close\n        chart_info:\n          default_visible: true\n          unit: \"&deg;C\"\n          chart_type: spline \n          color: \"#ffff00\"\n      - id: TMDD4CUT\n        title: Upper threshold value for TMDD4C\n        description: When this threshold is reached, it is likely that oviposition has begun.\n        chart_info:\n          default_visible: true\n          unit: \"&deg;C\"\n          chart_type: spline \n          color: \"#ff0000\"\n      - id: TJM10DD4CLT\n        title: Lower threshold value for TJM10DD4C\n        description: When this threshold is reached, the flight period is beginning and the first oviposition is close\n        chart_info:\n          default_visible: false\n          unit: \"&deg;C\"\n          chart_type: spline \n          color: \"#ff9900\"\n      - id: TJM10DD4CUT\n        title: Upper threshold value for TJM10DD4C\n        description: When this threshold is reached, it is likely that oviposition has begun.\n        chart_info:\n          default_visible: false\n          unit: \"&deg;C\"\n          chart_type: spline \n          color: \"#990000\"\n##\n- name: Cabbage moth model\n  id: MAMESTRABR\n  version: \"1.0\"\n  authors: # List of the model authors\n  - name: Nina Johansen\n    email: nina.johansen@nibio.no\n    organization: NIBIO\n  pests: \n  - BARABR # EPPO code for Cabbage Moth\n  crops:\n  - 1BRSG # EPPO code for the Brassica Genus\n  keywords: none\n  type_of_decision: Short-term tactical\n  type_of_output: Risk indication\n  description_URL: https://www.vips-landbruk.no/forecasts/models/DELIARADIC/\n  description: |\n    The model for the warning system for cabbage moth was developed by Dr. Nina Svae Johansen. \n    It is based on the minimum temperature threshold and the requirement for accumulated \n    day-degrees for the different stages of the cabbage moth [CITATION Joh96 \\t \\l 1044 ]. \n    The accumulated degree-day model calculates forecasts for development of the cabbage moth \n    through the summer, generates warnings for the time when eggs and small larvae can be \n    registered in the field and the best time for treatment [CITATION Joh97 \\t \\l 1044 ].\n\n    Note that the model is based on temperature, it is not related to the presence or \n    absence of cabbage moth in the field. Thus, it is important to evaluate the situation in the field.\n  citation: null # Optional. Use the DOI as identifier (list)\n  # Where has this model been considered valid\n  valid_spatial:\n    # Using country codes to get GeoJSON. Saves a lot of duplication.\n    # ISO-3166-1 Three-letter country codes https://en.wikipedia.org/wiki/ISO_3166-1#Current_codes\n    countries:\n      - NOR\n    # Optionally, use a custom polygon\n    geoJSON: |-\n      {}\n  input:\n   weather_parameters: \n   - parameter_code: 1002 # = Mean air temp at 2m\n     interval: 86400 # Sampling interval in seconds (3600 * 24 = 86400)\n   - parameter_code: 1112 # Mean soil temp at 10cm depth\n     interval: 86400 # Sampling interval in seconds (3600 * 24 = 86400)\n   weather_data_period_start: # DEFAULT is FIXED_DATE=XXXX-01-01\n     determined_by: INPUT_SCHEMA_PROPERTY ## Could be INPUT_SCHEMA_PROPERTY or FIXED_DATE\n     value: configParameters.timeStart ## Could be path.to.property OR e.g. XXXX-01-01\n   weather_data_period_end: # DEFAULT is FIXED_DATE=XXXX-12-31\n     determined_by: INPUT_SCHEMA_PROPERTY ## Could be INPUT_SCHEMA_PROPERTY or FIXED_DATE\n     value: configParameters.timeEnd ## Could be path.to.property OR e.g. XXXX-12-31\n  execution: \n    type: ONTHEFLY\n    endpoint: https://coremanager.vips.nibio.no/models/MAMESTRABR/run/ipmd\n    form_method: post # Could be get or post\n    content_type: application/json # Regular forms: application/x-www-form-urlencoded , Regular forms with files (<input type=\"file\">): multipart/form-data\n    # The input template should adhere to the JSON Schema standard: https://json-schema.org/\n    input_schema_hidden_properties:\n      - modelId\n    input_schema: |\n      {\n        \"type\":\"object\",\n        \"properties\": {\n          \"modelId\": {\"type\": \"string\", \"pattern\":\"^MAMESTRABR$\", \"title\": \"Model Id\", \"default\":\"MAMESTRABR\", \"description\":\"Must be MAMESTRABR\"},\n          \"configParameters\": {\n            \"title\":\"Configuration parameters\",\n            \"type\": \"object\",\n            \"properties\": {\n              \"timeZone\": {\"type\": \"string\", \"title\": \"Time zone (e.g. Europe/Oslo)\", \"default\":\"Europe/Oslo\"},\n              \"timeStart\": {\"type\": \"string\",\"format\": \"date\", \"title\": \"Start date of calculation (YYYY-MM-DD)\"},\n              \"timeEnd\": {\"type\": \"string\",\"format\": \"date\", \"title\": \"End date of calculation (YYYY-MM-DD)\"}\n            },\n            \"required\": [\"timeZone\"]\n          },\n          \"weatherData\": {\n            \"$ref\": \"https://ipmdecisions.nibio.no/api/wx/rest/schema/weatherdata\"\n          }\n        },\n        \"required\": [\"modelId\",\"configParameters\"]\n      }\n    # Definition of the result parameters specific for this DSS model\n  output: \n    warning_status_interpretation: |-\n      Green rectangles indicate that there is no danger of attack. Green rectangles are shown prior to the start of oviposition (SUMDG < 158).\n      Yellow rectangles (prior to red rectangles) indicate that oviposition has begun and that the farmer should make observations in the field. Yellow rectangles are first shown when the soil temperature has reached 158 day-degrees (SUMDG=158). Yellow rectangles are also shown later in the season, after a red warning, to indicate that it is beyond the optimal time for treatment (the small larval instars). The larvae are too big for effective chemical control (they seek shelter from the sun inside the heads).\n      Red rectangles indicate the optimal time for treatment (when when registration in the field indicates attack). At this time most of the larvae are small and easily targeted on the outer leaves.\n      Grey rectangles indicate that the warning has ended. The larvae are so big that chemical control is very difficult or no longer possible.\n    result_parameters:\n      # the id is used with the model_id as the namespace\n      - id: TMDD\n        title: Accumulated day degrees \n        description: The accumulated day degrees with a base temperature of 0 degrees celcius\n##\n- name: Carrot rust fly observation model\n  id: PSILAROBSE\n  version: \"1.0\"\n  authors: # List of the model authors\n  - name: Tor J. Johansen\n    email: tor.johansen@nibio.no\n    organization: NIBIO\n  pests: \n  - PSILRO # EPPO code for carrot rust fly\n  crops:\n  - DAUCS # EPPO code for carrot\n  keywords: none\n  type_of_decision: Short-term tactical\n  type_of_output: Risk indication\n  description_URL: https://www.vips-landbruk.no/forecasts/models/PSILARTEMP/\n  description: |\n    The warning system model is based on weekly observations of adult carrot rust flies captured on yellow sticky traps. The model is based in its entirety on observations, with no input of weather data or weather forecasts. Traps are placed in the field edge and in the field and are examined for carrot rust flies weekly throughout the season. The number of adult carrot rust flies is registered in VIPS and is used in the warning system model. The observations are compared with the economic threshold levels and a warning is calculated. After organophosphates (which had a good effect against larvae) were removed from the market, they were replaced by pyrethroids that only work against the adult stage. Studies were carried out in 2005 and 2006 to adjust the larval-based thresholds to chemical control of adult flies. The experience from Norway and other countries indicated that the first treatment against carrot rust flies should be done as soon as possible after the first fly is observed on the traps. The threshold that is used in VIPS is therefore at the first observation of 1 fly.\n  citation: null # Optional. Use the DOI as identifier (list)\n  # Where has this model been considered valid\n  valid_spatial:\n    # Using country codes to get GeoJSON. Saves a lot of duplication.\n    # ISO-3166-1 Three-letter country codes https://en.wikipedia.org/wiki/ISO_3166-1#Current_codes\n    countries:\n      - NOR\n    # Optionally, use a custom polygon\n    geoJSON: |-\n      {}\n  input:\n   field_observation:\n    species: \n    - PSILRO # EPPO Code for the disease\n  execution: \n    type: ONTHEFLY\n    endpoint: https://coremanager.vips.nibio.no/models/PSILAROBSE/run/ipmd\n    form_method: post # Could be get or post\n    content_type: application/json # Regular forms: application/x-www-form-urlencoded , Regular forms with files (<input type=\"file\">): multipart/form-data\n    # The input template should adhere to the JSON Schema standard: https://json-schema.org/\n    input_schema_hidden_properties:\n      - modelId\n    input_schema: |\n      {\n        \"type\":\"object\",\n        \"properties\": {\n          \"modelId\": {\"type\": \"string\", \"pattern\":\"^PSILAROBSE$\", \"title\": \"Model Id\", \"default\":\"PSILAROBSE\", \"description\":\"Must be PSILAROBSE\"},\n          \"configParameters\": {\n            \"title\":\"Configuration parameters\",\n            \"type\": \"object\",\n            \"properties\": {\n              \"timeZone\": {\"type\": \"string\", \"title\": \"Time zone (e.g. Europe/Oslo)\", \"default\":\"Europe/Oslo\"},\n              \"startDateCalculation\": {\"type\":\"string\",\"format\": \"date\", \"title\": \"Start date of calculation (YYYY-MM-DD)\"},\n              \"endDateCalculation\": {\"type\":\"string\",\"format\": \"date\", \"title\": \"End date of calculation (YYYY-MM-DD)\"},\n              \"fieldObservations\": {\n                \"title\": \"Field observations\",\n                \"type\": \"array\",\n                \"items\": {\n                  \"$ref\": \"https://ipmdecisions.nibio.no/api/dss/rest/schema/fieldobservation\"\n                }\n              },\n              \"fieldObservationQuantifications\": {\n                \"title\": \"Field observation quantifications\",\n                \"type\": \"array\",\n                \"items\": {\n                  \"oneOf\": [\n                    {\n                      \"$ref\": \"#/definitions/fieldObs_PSILRO\"\n                    }\n                  ]\n                }\n              }\n            },\n            \"required\": [\"timeZone\",\"startDateCalculation\",\"endDateCalculation\"]\n          }\n        },\n        \"required\": [\"modelId\",\"configParameters\"],\n        \"definitions\": {\n          \"fieldObs_PSILRO\": {\n            \"title\": \"Psila rosae quantification\", \n            \"properties\": {\n              \"trapCountCropEdge\":{\"title\":\"Insect trap count at the edge of the field\",\"type\":\"integer\"},\n              \"trapCountCropInside\":{\"title\":\"Insect trap count inside the field\",\"type\":\"integer\"}\n            },\n            \"required\": [\"trapCountCropEdge\",\"trapCountCropInside\"]\n          }\n        }\n      }\n    # Definition of the result parameters specific for this DSS model\n  output: \n    warning_status_interpretation: |-\n      Green rectangles indicate that the damage threshold has not been reached and there is no need for treatment.\n\n      Yellow rectangles indicate that carrot rust flies have been caught on traps at the edge of the field and it may be necessary to treat. The field should be checked to evaluate whether treatment is necessary.\n\n      Red rectangles indicate that carrot rust flies have been caught on traps in the field. The field should be checked to evaluate whether treatment is necessary.\n\n      The damage threshold for the first observation on sticky traps is 1 fly. Attack will vary from field to field, we recommend therefore that observations are made in addition in the farmer’s own field. Control measures should be used as soon as possible after the first observation in the farmer’s own field (if the plants are dry, without precipitation and the plants have reached the first true-leaf stage. Consider, based on previous experience and the size and shape of the field whether the entire field or only the border rows should be treated.\n    result_parameters:\n      # the id is used with the model_id as the namespace\n      - id: TRAP_COUNT_CROP_EDGE\n        title: Insect trap count at the edge of the field\n        description: Insect trap count at the edge of the field\n      - id: TRAP_COUNT_CROP_INSIDE\n        title: Insect trap count inside the field\n        description: Insect trap count inside the field\n##\n- name: Cabbage root fly and turnip fly observation model\n  id: DELIARFOBS\n  version: \"1.0\"\n  authors: # List of the model authors\n  - name: Richard Meadow\n    email: richard.meadow@nibio.no\n    organization: NIBIO\n  pests: \n  - HYLERA # EPPO code for Cabbage root fly (Delia radicum)\n  - HYLEFL # EPPO code for turnip fly (Delia floralis)\n  crops:\n  - BROSL # EPPO code for cabbage (head cabbage, Brassica oleracea var. capitata)\n  - BRSOB # EPPO code for cauliflower (Brassica oleracea var. botrytis)\n  - BRSOK # EPPO code for broccoli (Brassica oleracea var. italica)\n  type_of_decision: Short-term tactical\n  type_of_output: Risk indication\n  description_URL: https://www.vips-landbruk.no/forecasts/models/DELIARFOBS/\n  description: |\n    The warning system model is based on weekly observations of oviposition by the \n    brassica root flies [CITATION Bli991 \\l 1044 ]. The model is based in its entirety \n    on observations, with no input of weather data or weather forecasts. The model does \n    not distinguish between the cabbage maggot and the turnip fly. The observations consist \n    of collecting sand from the base of 10 plants and floating the eggs in water. The \n    counts are registered in VIPS and the mean number of eggs is calculated. The observations \n    are compared to damage thresholds [CITATION Bli99 \\l 1044 ] and warnings are calculated.\n    The damage thresholds are related to the plants developmental stage and tell how many eggs \n    that can be on a plant before there will be a reduction in growth and yield. VIPS presents \n    two warning system models based on damage thresholds: one for newly planted cabbage and \n    one for cabbage that has been in the field more than 4 weeks. The model can also be set up \n    as a private warning for the farmer’s own field, in which case the model will vary between \n    the two different damage thresholds based on the age of the cabbage crop (starting at the \n    time of planting).\n    The warning system model is only valid for cabbage, cauliflower and broccoli. The damage \n    threshold for cabbage, cauliflower and broccoli the first 4 weeks after planting is 14 eggs \n    per plant per week. After 4 weeks the damage threshold changes to 40 eggs per plant per \n    week. Damage thresholds have not been determined for other crucifers.\n  citation: null # Optional. Use the DOI as identifier (list)\n  # Where has this model been considered valid\n  valid_spatial:\n    # Using country codes to get GeoJSON. Saves a lot of duplication.\n    # ISO-3166-1 Three-letter country codes https://en.wikipedia.org/wiki/ISO_3166-1#Current_codes\n    countries:\n      - NOR\n    # Optionally, use a custom polygon\n    geoJSON: |-\n      {}\n  input:\n   field_observation:\n    species: \n    - HYLERA # EPPO Code for the disease\n    - HYLEFL\n  execution: \n    type: ONTHEFLY\n    endpoint: https://coremanager.vips.nibio.no/models/DELIARFOBS/run/ipmd\n    form_method: post # Could be get or post\n    content_type: application/json # Regular forms: application/x-www-form-urlencoded , Regular forms with files (<input type=\"file\">): multipart/form-data\n    # The input template should adhere to the JSON Schema standard: https://json-schema.org/\n    input_schema_hidden_properties:\n      - modelId\n    input_schema: |\n      {\n        \"type\":\"object\",\n        \"properties\": {\n          \"modelId\": {\"type\": \"string\", \"pattern\":\"^DELIARFOBS$\", \"title\": \"Model Id\", \"default\":\"DELIARFOBS\", \"description\":\"Must be DELIARFOBS\"},\n          \"configParameters\": {\n            \"title\":\"Configuration parameters\",\n            \"type\": \"object\",\n            \"properties\": {\n              \"timeZone\": {\"type\": \"string\", \"title\": \"Time zone (e.g. Europe/Oslo)\", \"default\":\"Europe/Oslo\"},\n              \"startDateCalculation\": {\"type\":\"string\",\"format\": \"date\", \"title\": \"Start date of calculation (YYYY-MM-DD)\"},\n              \"endDateCalculation\": {\"type\":\"string\",\"format\": \"date\", \"title\": \"End date of calculation (YYYY-MM-DD)\"},\n              \"fieldObservations\": {\n                \"title\": \"Field observations\",\n                \"type\": \"array\",\n                \"items\": {\n                  \"$ref\": \"https://ipmdecisions.nibio.no/api/dss/rest/schema/fieldobservation\"\n                }\n              },\n              \"fieldObservationQuantifications\": {\n                \"title\": \"Field observation quantifications\",\n                \"type\": \"array\",\n                \"items\": {\n                  \"oneOf\": [\n                    {\n                      \"$ref\": \"#/definitions/fieldObs_HYLERA\"\n                    }\n                  ]\n                }\n              }\n            },\n            \"required\": [\"timeZone\",\"startDateCalculation\",\"endDateCalculation\"]\n          }\n        },\n        \"required\": [\"modelId\",\"configParameters\"],\n        \"definitions\": {\n          \"fieldObs_HYLERA\": {\n            \"title\": \"Delia radicum egg quantification\", \n            \"properties\": {\n              \"counting01\":{\"title\":\"Number of eggs, plant 1\", \"type\":\"integer\", \"minimum\": 0},\n              \"counting02\":{\"title\":\"Number of eggs, plant 2\", \"type\":\"integer\", \"minimum\": 0},\n              \"counting03\":{\"title\":\"Number of eggs, plant 3\", \"type\":\"integer\", \"minimum\": 0},\n              \"counting04\":{\"title\":\"Number of eggs, plant 4\", \"type\":\"integer\", \"minimum\": 0},\n              \"counting05\":{\"title\":\"Number of eggs, plant 5\", \"type\":\"integer\", \"minimum\": 0},\n              \"counting06\":{\"title\":\"Number of eggs, plant 6\", \"type\":\"integer\", \"minimum\": 0},\n              \"counting07\":{\"title\":\"Number of eggs, plant 7\", \"type\":\"integer\", \"minimum\": 0},\n              \"counting08\":{\"title\":\"Number of eggs, plant 8\", \"type\":\"integer\", \"minimum\": 0},\n              \"counting09\":{\"title\":\"Number of eggs, plant 9\", \"type\":\"integer\", \"minimum\": 0},\n              \"counting10\":{\"title\":\"Number of eggs, plant 10\",\"type\":\"integer\", \"minimum\": 0}\n            },\n            \"required\": []\n          }\n        }\n      }\n    # Definition of the result parameters specific for this DSS model\n  output: \n    warning_status_interpretation: |-\n      Green rectangles indicate that the damage threshold for cabbage based on the time from planting until the registration has not been reached and control measures are not needed.\n      Red rectangles indicate that the damage threshold f for cabbage based on the time from planting until the registration has been reached and it may be necessary to use control measures. The field should be checked to evaluate whether treatment is necessary.\n      This model does not use yellow rectangles. The warning goes directly from green to red when the damage threshold is exceeded.\n      Blue rectangles indicate that there are missing observations. An observation is valid for 8 days. If there are more than 8 days before a new observation is registered in the system, the model will give a blue warning.\n      The damage thresholds are related to the plants developmental stage and tell how many eggs that can be on a plant before there will be a reduction in growth and yield.\n      The warning should tell the best time for treatment in relation to the damage thresholds. If the number of eggs registered exceeds the damage threshold, treatment against the maggots is recommended, if the plants are not protected by other means. Observe the ”days-to-harvest”. If the seeds (cauliflower or broccoli) were treated against maggots, treatment early in the season is not necessary.\n    result_parameters:\n      # the id is used with the model_id as the namespace\n      - id: OBS_AVG\n        title: Average egg count\n        description: Average of counting of eggs on 10 plants\n      - id: THRESHOLD_YOUNG\n        title: Economic threshold in young plants\n        description: Economic threshold in young plants (up to 4 weeks)\n      - id: THRESHOLD_OLD\n        title: Economic threshold in mature plants\n        description: Economic threshold in mature plants (4 weeks and older)\n###########\n- name: Nærstad model\n  id: NAERSTADMO\n  version: \"1.0\"\n  authors: # List of the model authors\n  - name: Ragnhild Nærstad\n    email: ragnhild.naerstad@syngenta.com\n    organization: Syngenta\n  pests:\n  - PHYTIN # EPPO code for Potato late blight (Phytophthora infestans)\n  crops:\n  - SOLTU # EPPO code for potato\n  type_of_decision: Short-term tactical\n  type_of_output: Risk indication\n  description_URL: https://www.vips-landbruk.no/forecasts/models/NAERSTADMO/ \n  description: |\n    The model is based on several years of experiments where trap plants have been placed next to a potato field infected with late blight. Infections on these plants have been correlated with weather conditions the day of exposure, and this is the data the model is based on. The model predicts if there are favourable conditions for spore production and the following spread, survival and infection of these spores. The model produces an infection risk, and a value of 2.5 corresponds to one spot of late blight on each trap plant exposed. This value of 2.5 is the threshold where the model issues a warning.\n  citation: null # Optional. Use the DOI as identifier (list)\n  # Where has this model been considered valid\n  valid_spatial:\n    # Using country codes to get GeoJSON. Saves a lot of duplication.\n    # ISO-3166-1 Three-letter country codes https://en.wikipedia.org/wiki/ISO_3166-1#Current_codes\n    countries:\n      - NOR\n      - SWE\n    # Optionally, use a custom polygon\n    geoJSON: |-\n      {}\n  input:\n   weather_parameters: # TODO: weather parameter codes, frequency codes and unit codes\n   - parameter_code: 1002 # = Mean temp at 2m measured in Celcius.\n     interval: 3600 # The least detail accepted (higher frequencies can aggregate to lower)\n   - parameter_code: 2001 # Precipitation measured in mm. \n     interval: 3600 # The least detail accepted (higher frequencies can aggregate to lower)\n   - parameter_code: 5001 # Global radiation in W/sqm. \n     interval: 3600 # The least detail accepted (higher frequencies can aggregate to lower)\n   - parameter_code: 3002 # Relative humidity at 2m in % \n     interval: 3600 # The least detail accepted (higher frequencies can aggregate to lower)\n   - parameter_code: 3101  # Leaf wetness duration. Measured in minutes with wetness per period \n     interval: 3600 # The least detail accepted (higher frequencies can aggregate to lower)\n   weather_data_period_start: # DEFAULT is FIXED_DATE=XXXX-01-01\n     determined_by: INPUT_SCHEMA_PROPERTY ## Could be INPUT_SCHEMA_PROPERTY or FIXED_DATE\n     value: configParameters.timeStart ## Could be path.to.property OR e.g. XXXX-01-01\n   weather_data_period_end: # DEFAULT is FIXED_DATE=XXXX-12-31\n     determined_by: INPUT_SCHEMA_PROPERTY ## Could be INPUT_SCHEMA_PROPERTY or FIXED_DATE\n     value: configParameters.timeEnd ## Could be path.to.property OR e.g. XXXX-12-31\n  execution:\n    type: ONTHEFLY\n    endpoint: https://coremanager.vips.nibio.no/models/NAERSTADMO/run/ipmd\n    form_method: post # Could be get or post\n    content_type: application/json # Regular forms: application/x-www-form-urlencoded , Regular forms with files (<input type=\"file\">): multipart/form-data\n    # The input template should adhere to the JSON Schema standard: https://json-schema.org/\n    input_schema_hidden_properties:\n      - modelId\n    input_schema: |\n      {\n        \"type\":\"object\",\n        \"properties\": {\n          \"modelId\": {\"type\": \"string\", \"pattern\":\"^NAERSTADMO$\", \"title\": \"Model Id (Must be NAERSTADMO)\", \"default\":\"NAERSTADMO\"},\n          \"configParameters\": {\n            \"type\": \"object\",\n            \"title\":\"Configuration parameters\",\n            \"properties\": {\n              \"timeZone\": {\"type\": \"string\", \"title\": \"Time zone (e.g. Europe/Oslo)\"},\n              \"timeStart\": {\"type\": \"string\",\"format\": \"date\", \"title\": \"Start date of calculation (YYYY-MM-DD)\"},\n              \"timeEnd\": {\"type\": \"string\",\"format\": \"date\", \"title\": \"End date of calculation (YYYY-MM-DD)\"}\n            },\n            \"required\": [\"timeZone\",\"timeStart\",\"timeEnd\"]\n          },\n          \"weatherData\": {\n            \"$ref\": \"https://ipmdecisions.nibio.no/api/wx/rest/schema/weatherdata\"\n          }\n        },\n        \"required\": [\"modelId\",\"configParameters\"]\n      }\n  output: \n    warning_status_interpretation: |-\n      Risk < 1 = no warning (Green)\n      Risk > 1 and < 2,5 = possible warning coming up if conditions persists (Yellow)\n      Risk > 2,5 = warning issued (Red)\n      When a warning is issued, any control measure should be considered based on cultivar resistance, choice of fungicide and time of last application. Risk of infection is highest after several consecutive days with warnings, and especially if late blight has been observed in the area.\n    result_parameters:\n      # the id is used with the model_id as the namespace\n      - id: RISK\n        title: Calculated risk value\n        description: Calculated risk value\n#####\n- name: Alternaria TOMCAST\n  id: ALTERNARIA\n  version: \"1.0\"\n  authors: # List of the model authors\n  - name: Dr R. E. Pitblado\n  pests:\n  - ALTESO # EPPO code for Alternaria solanum\n  crops:\n  - SOLTU # EPPO code for potato\n  type_of_decision: Short-term tactical\n  type_of_output: Risk indication\n  description_URL: https://www.vips-landbruk.no/forecasts/models/ALTERNARIA/ \n  description: |\n    TOMCAST is based on a model that was originally developed for leaf spot diseases in tomato. The model that is used here is tested and adapted to be used against early blight in potato in Denmark (Alternaria solani). The model calculates daily risk values (DSV: Disease Severity Values) based on temperature and leaf wetness the previous day. DSV represents the risk of attack of early blight the previous 24 hours. Daily values of DSV are accumulated until a threshold value is reached, and treatment is recommended. When a spray is performed and entered into the model, accumulation of DSV is reset and starts over at 0.\n  citation: null # Optional. Use the DOI as identifier (list)\n  # Where has this model been considered valid\n  valid_spatial:\n    # Using country codes to get GeoJSON. Saves a lot of duplication.\n    # ISO-3166-1 Three-letter country codes https://en.wikipedia.org/wiki/ISO_3166-1#Current_codes\n    countries:\n      - NOR\n    # Optionally, use a custom polygon\n    geoJSON: |-\n      {}\n  input:\n   weather_parameters: # TODO: weather parameter codes, frequency codes and unit codes\n   - parameter_code: 1002 # = Mean temp at 2m measured in Celcius.\n     interval: 3600 # The least detail accepted (higher frequencies can aggregate to lower)\n   - parameter_code: 3101  # Leaf wetness duration. Measured in minutes with wetness per period \n     interval: 3600 # The least detail accepted (higher frequencies can aggregate to lower)\n   weather_data_period_start: # DEFAULT is FIXED_DATE=XXXX-01-01\n     determined_by: INPUT_SCHEMA_PROPERTY ## Could be INPUT_SCHEMA_PROPERTY or FIXED_DATE\n     value: configParameters.timeStart ## Could be path.to.property OR e.g. XXXX-01-01\n   weather_data_period_end: # DEFAULT is FIXED_DATE=XXXX-12-31\n     determined_by: INPUT_SCHEMA_PROPERTY ## Could be INPUT_SCHEMA_PROPERTY or FIXED_DATE\n     value: configParameters.timeEnd ## Could be path.to.property OR e.g. XXXX-12-31\n  execution:\n    type: ONTHEFLY\n    endpoint: https://coremanager.vips.nibio.no/models/ALTERNARIA/run/ipmd\n    form_method: post # Could be get or post\n    content_type: application/json # Regular forms: application/x-www-form-urlencoded , Regular forms with files (<input type=\"file\">): multipart/form-data\n    # The input template should adhere to the JSON Schema standard: https://json-schema.org/\n    input_schema_hidden_properties:\n      - modelId\n    input_schema: |\n      {\n        \"type\":\"object\",\n        \"properties\": {\n          \"modelId\": {\"type\": \"string\", \"pattern\":\"^ALTERNARIA$\", \"title\": \"Model Id (Must be ALTERNARIA)\", \"default\":\"ALTERNARIA\"},\n          \"configParameters\": {\n            \"type\": \"object\",\n            \"title\":\"Configuration parameters\",\n            \"properties\": {\n              \"timeZone\": {\"type\": \"string\", \"title\": \"Time zone (e.g. Europe/Oslo)\"},\n              \"timeStart\": {\"type\": \"string\",\"format\": \"date\", \"title\": \"Start date of calculation (YYYY-MM-DD)\"},\n              \"timeEnd\": {\"type\": \"string\",\"format\": \"date\", \"title\": \"End date of calculation (YYYY-MM-DD)\"},\n              \"sprayingDates\": {\"type\": \"array\", \"minItems\":0, \"maxItems\":3, \"title\": \"Spraying dates\",\"items\":{\"type\":\"string\",\"format\":\"date\"}}\n            },\n            \"required\": [\"timeZone\",\"timeStart\",\"timeEnd\"]\n          },\n          \"weatherData\": {\n            \"$ref\": \"https://ipmdecisions.nibio.no/api/wx/rest/schema/weatherdata\"\n          }\n        },\n        \"required\": [\"modelId\",\"configParameters\"]\n      }\n  output: \n    warning_status_interpretation: |-\n      The model will be green (no risk) until it reaches 15. From this value the warning will be yellow (possible risk) until the threshold is reached, and the warning turns red (risk of infection).\n    result_parameters:\n      # the id is used with the model_id as the namespace\n      - id: DSV_SUM\n        title: Aggregated Daily Disease Severity Value\n        description: The aggregated risk\n#####\n- name: Negative prognosis\n  id: NEGPROGMOD\n  version: \"1.0\"\n  authors: # List of the model authors\n  - name: Ullrich J. & H. Schrödter\n  pests:\n  - PHYTIN # EPPO code for Alternaria solanum\n  crops:\n  - SOLTU # EPPO code for potato\n  type_of_decision: Short-term tactical\n  type_of_output: Risk indication\n  description_URL: https://www.vips-landbruk.no/forecasts/models/NEGPROGMOD/ \n  description: |\n    From a specific date (50% germination), daily risk values are accumulated based on weather data (temperature, relative humidity and precipitation). The risk is an accumulated value of how the weather affects late blight germination/infection, sporulation and growth. Alle processes are corrected for inhibition due to drying. After the accumulated risk has reached a certain limit (150), there will be an infection risk if there is one day with high infection risk. This model is together with time of row closure, used to decide the timing of first spray against potato late blight.\n  citation: null # Optional. Use the DOI as identifier (list)\n  # Where has this model been considered valid\n  valid_spatial:\n    # Using country codes to get GeoJSON. Saves a lot of duplication.\n    # ISO-3166-1 Three-letter country codes https://en.wikipedia.org/wiki/ISO_3166-1#Current_codes\n    countries:\n      - NOR\n    # Optionally, use a custom polygon\n    geoJSON: |-\n      {}\n  input:\n   weather_parameters: # TODO: weather parameter codes, frequency codes and unit codes\n   - parameter_code: 1002 # = Mean temp at 2m measured in Celcius.\n     interval: 3600 # The least detail accepted (higher frequencies can aggregate to lower)\n   - parameter_code: 2001  # Precipitation\n     interval: 3600 # The least detail accepted (higher frequencies can aggregate to lower)\n   - parameter_code: 3002 # Mean relative humidity (%)\n     interval: 3600\n   weather_data_period_start: # DEFAULT is FIXED_DATE=XXXX-01-01\n     determined_by: INPUT_SCHEMA_PROPERTY ## Could be INPUT_SCHEMA_PROPERTY or FIXED_DATE\n     value: configParameters.timeStart ## Could be path.to.property OR e.g. XXXX-01-01\n   weather_data_period_end: # DEFAULT is FIXED_DATE=XXXX-12-31\n     determined_by: INPUT_SCHEMA_PROPERTY ## Could be INPUT_SCHEMA_PROPERTY or FIXED_DATE\n     value: configParameters.timeEnd ## Could be path.to.property OR e.g. XXXX-12-31\n  execution:\n    type: ONTHEFLY\n    endpoint: https://coremanager.vips.nibio.no/models/NEGPROGMOD/run/ipmd\n    form_method: post # Could be get or post\n    content_type: application/json # Regular forms: application/x-www-form-urlencoded , Regular forms with files (<input type=\"file\">): multipart/form-data\n    # The input template should adhere to the JSON Schema standard: https://json-schema.org/\n    input_schema_hidden_properties:\n      - modelId\n    input_schema: |\n      {\n        \"type\":\"object\",\n        \"properties\": {\n          \"modelId\": {\"type\": \"string\", \"pattern\":\"^NEGPROGMOD$\", \"title\": \"Model Id (Must be NEGPROGMOD)\", \"default\":\"NEGPROGMOD\"},\n          \"configParameters\": {\n            \"type\": \"object\",\n            \"title\":\"Configuration parameters\",\n            \"properties\": {\n              \"timeZone\": {\"type\": \"string\", \"title\": \"Time zone (e.g. Europe/Oslo)\"},\n              \"timeStart\": {\"type\": \"string\",\"format\": \"date\", \"title\": \"Start date of calculation (YYYY-MM-DD)\"},\n              \"timeEnd\": {\"type\": \"string\",\"format\": \"date\", \"title\": \"End date of calculation (YYYY-MM-DD)\"}\n            },\n            \"required\": [\"timeZone\",\"timeStart\",\"timeEnd\"]\n          },\n          \"weatherData\": {\n            \"$ref\": \"https://ipmdecisions.nibio.no/api/wx/rest/schema/weatherdata\"\n          }\n        },\n        \"required\": [\"modelId\",\"configParameters\"]\n      }\n  output: \n    warning_status_interpretation: |-\n      When accumulated risk < 150, warning symbol is green\n\n      When accumulated risk > 150, warning symbol is yellow if the daily risk is below 7 and red if it is above 7\n\n      When a late blight warning has been issued, cultivar suseptibility, selection of fungicide and time of application should be considered before spraying. Risk of getting an infection is highest if warnings are issued two days ore more in a row, and when late blight has been observed in the area. \n    result_parameters:\n      # the id is used with the model_id as the namespace\n      - id: AGGREGATED_CONTRIB\n        title: Aggregated infection risk\n        description: The aggregated risk\n      - id: INFECTION_THRESHOLD\n        title: Infection threshold\n        description: Threshold for \"High infection risk\"\n#####\n- name: Septoria apiicola model\n  id: SEPAPIICOL\n  version: \"1.0\"\n  authors: # List of the model authors\n  - name: Berit Nordskog\n    email: berit.nordskog@nibio.no\n    organization: NIBIO\n  - name: Arne Hermansen\n    email: arne.hermansen@nibio.no\n    organization: NIBIO\n  pests: \n  - SEPTAP # EPPO code for the disease\n  crops:\n  - APUGD # EPPO code for celery\n  type_of_decision: Short-term tactical\n  type_of_output: Risk indication\n  description_URL: https://www.vips-landbruk.no/forecasts/models/SEPAPIICOL/\n  description: |\n    This model is based on a calculation of how leaf wetness periods influence infection of celery by Septoria apiicola in susceptible host plants.\n    \n    Forecasts of infection risk are given after a minimum of 12 consecutive hours of leaf wetness. The wet periods are calculated from sensors placed 30 cm above ground. If such a sensor is not available, data from leaf wetness sensors placed 2 m above ground are used.\n    \n    The model is developed in Michigan, USA and published by Lacy, 1994.\n    \n    It is generally assumed that this model has additional relevance for Septoria petroselini in parsley.\n  citation: null # Optional. Use the DOI as identifier (list)\n  # Where has this model been considered valid\n  valid_spatial:\n    # Using country codes to get GeoJSON. Saves a lot of duplication.\n    # ISO-3166-1 Three-letter country codes https://en.wikipedia.org/wiki/ISO_3166-1#Current_codes\n    countries:\n      - NOR\n    # Optionally, use a custom polygon\n    geoJSON: |-\n      {}\n  input:\n   weather_parameters: \n   - parameter_code: 3101  # Leaf wetness duration. Measured in minutes with wetness per period \n     interval: 3600\n   - parameter_code: 1002 # = Mean temp at 2m measured in Celcius.\n     interval: 3600 # The least detail accepted (higher frequencies can aggregate to lower)\n   - parameter_code: 2001  # Precipitation\n     interval: 3600 # The least detail accepted (higher frequencies can aggregate to lower)\n   - parameter_code: 3002 # Mean relative humidity (%)\n     interval: 3600\n   weather_data_period_start: # DEFAULT is FIXED_DATE=XXXX-01-01\n     determined_by: INPUT_SCHEMA_PROPERTY ## Could be INPUT_SCHEMA_PROPERTY or FIXED_DATE\n     value: configParameters.startDateGrowth ## Could be path.to.property OR e.g. XXXX-01-01\n   weather_data_period_end: # DEFAULT is FIXED_DATE=XXXX-12-31\n     determined_by: INPUT_SCHEMA_PROPERTY ## Could be INPUT_SCHEMA_PROPERTY or FIXED_DATE\n     value: configParameters.endDateCalculation ## Could be path.to.property OR e.g. XXXX-12-31\n   field_observation:\n    species: \n    - SEPTAP # EPPO Code for the disease\n  execution:\n    type: ONTHEFLY # [ONTHEFLY, BATCH, TICKET]\n    endpoint: https://coremanager.vips.nibio.no/models/SEPAPIICOL/run/ipmd\n    form_method: post # Could be get or post\n    content_type: application/json # Regular forms: application/x-www-form-urlencoded , Regular forms with files (<input type=\"file\">): multipart/form-data\n    # The input template should adhere to the JSON Schema standard: https://json-schema.org/\n    input_schema_hidden_properties:\n      - modelId\n    input_schema: |\n      {\n        \"type\":\"object\",\n        \"properties\": {\n          \"modelId\": {\"type\": \"string\", \"pattern\":\"^SEPAPIICOL$\", \"title\": \"Model Id (Must be SEPAPIICOL)\", \"default\":\"SEPAPIICOL\"},\n          \"configParameters\": {\n            \"title\":\"Configuration parameters\",\n            \"type\": \"object\",\n            \"properties\": {\n              \"timeZone\": {\"type\": \"string\", \"title\": \"Time zone (e.g. Europe/Oslo)\"},\n              \"startDateGrowth\": {\"type\": \"string\", \"format\":\"date\", \"title\": \"Start date of growth (YYYY-MM-DD)\"},\n              \"endDateCalculation\": {\"type\": \"string\", \"format\":\"date\", \"title\": \"End date of calculation (YYYY-MM-DD)\"},\n              \"fieldObservations\": {\n                \"title\": \"Field observations\",\n                \"type\": \"array\",\n                \"items\": {\n                  \"$ref\": \"https://ipmdecisions.nibio.no/api/dss/rest/schema/fieldobservation\"\n                }\n              },\n              \"fieldObservationQuantifications\": {\n                \"title\": \"Field observation quantifications\",\n                \"type\": \"array\",\n                \"items\": {\n                  \"oneOf\": [\n                    {\n                      \"$ref\": \"#/definitions/fieldObs_SEPTAP\"\n                    }\n                  ]\n                }\n              }\n            },\n            \"required\": [\"timeZone\",\"startDateGrowth\",\"endDateCalculation\"]\n          },\n          \"weatherData\": {\n            \"$ref\": \"https://ipmdecisions.nibio.no/api/wx/rest/schema/weatherdata\"\n          }\n        },\n        \"required\": [\"modelId\",\"configParameters\"],\n        \"definitions\": {\n          \"fieldObs_SEPTAP\": {\"title\": \"Septoria apiicola quantification\", \"properties\": {\"observed\":{\"title\":\"observed\", \"type\":\"boolean\"}}}\n        }\n      }\n  output: \n    warning_status_interpretation: |-\n      Green = No risk of infection.\n      Yellow = Weather conditions favorable for infection risk. No known sources of inoculum in the region.\n      Red = Risk of infection and infections of Septoria late blight has been reported in the nearby region. Disease reports and field inspections are performed in collaboration with advisors in the Norwegian Agricultural Advisory service.\n    result_parameters:\n      # the id is used with the model_id as the namespace\n      - id: WET_DAY\n        title: Was this a wet day\n        description: Based on leaf wetness measurements\n      - id: PEST_OBSERVED\n        title: Has the pest been observed in or near the field, or in the nearby region\n        description: Without this, the warning status will never exceed yellow status\n##########\n- name: Bremia lactucae (Downy mildew of lettuce) model\n  id: BREMIALACT\n  version: \"1.0\"\n  authors: # List of the model authors\n  - name: Berit Nordskog\n    email: berit.nordskog@nibio.no\n    organization: NIBIO\n  pests: \n  - BREMLA # EPPO code for Downy mildew of lettuce\n  crops:\n  - 1LACG # EPPO code for the genus Lactuca\n  keywords: none\n  type_of_decision: Short-term tactical\n  type_of_output: Risk indication\n  description_URL: https://www.vips-landbruk.no/forecasts/models/BREMIALACT/\n  description: |\n    TODO\n  citation: null # Optional. Use the DOI as identifier (list)\n  # Where has this model been considered valid\n  valid_spatial:\n    # Using country codes to get GeoJSON. Saves a lot of duplication.\n    # ISO-3166-1 Three-letter country codes https://en.wikipedia.org/wiki/ISO_3166-1#Current_codes\n    countries:\n      - NOR\n    # Optionally, use a custom polygon\n    geoJSON: |-\n      {}\n  input:\n   weather_parameters: \n   - parameter_code: 1002 # = Mean air temp at 2m\n     interval: 86400 # Sampling interval in seconds (3600 * 24 = 86400)\n   weather_data_period_start: # DEFAULT is FIXED_DATE=XXXX-01-01\n     determined_by: INPUT_SCHEMA_PROPERTY ## Could be INPUT_SCHEMA_PROPERTY or FIXED_DATE\n     value: configParameters.timeStart ## Could be path.to.property OR e.g. XXXX-01-01\n   weather_data_period_end: # DEFAULT is FIXED_DATE=XXXX-12-31\n     determined_by: INPUT_SCHEMA_PROPERTY ## Could be INPUT_SCHEMA_PROPERTY or FIXED_DATE\n     value: configParameters.timeEnd ## Could be path.to.property OR e.g. XXXX-12-31\n  execution: \n    type: ONTHEFLY\n    endpoint: https://coremanager.vips.nibio.no/models/run/ipmd\n    form_method: post # Could be get or post\n    content_type: application/json # Regular forms: application/x-www-form-urlencoded , Regular forms with files (<input type=\"file\">): multipart/form-data\n    # The input template should adhere to the JSON Schema standard: https://json-schema.org/\n    input_schema_hidden_properties:\n      - modelId\n    input_schema: |\n      {\n        \"type\":\"object\",\n        \"properties\": {\n          \"modelId\": {\"type\": \"string\", \"pattern\":\"^PSILARTEMP$\", \"title\": \"Model Id\", \"default\":\"PSILARTEMP\", \"description\":\"Must be PSILARTEMP\"},\n          \"configParameters\": {\n            \"title\":\"Configuration parameters\",\n            \"type\": \"object\",\n            \"properties\": {\n              \"timeZone\": {\"type\": \"string\", \"title\": \"Time zone (e.g. Europe/Oslo)\", \"default\":\"Europe/Oslo\"},\n              \"timeStart\": {\"type\":\"string\",\"format\": \"date\", \"title\": \"Start date of calculation (YYYY-MM-DD)\"},\n              \"timeEnd\": {\"type\":\"string\",\"format\": \"date\", \"title\": \"End date of calculation (YYYY-MM-DD)\"}\n            },\n            \"required\": [\"timeZone\",\"timeStart\",\"timeEnd\"]\n          },\n          \"weatherData\": {\n            \"$ref\": \"https://ipmdecisions.nibio.no/api/wx/rest/schema/weatherdata\"\n          }\n        },\n        \"required\": [\"modelId\",\"configParameters\"]\n      }\n    # Definition of the result parameters specific for this DSS model\n  output: \n    warning_status_interpretation: |-\n      Downy mildew in lettuce normally occurs in the second half of the summer, and not every year in lettuce producing regions.\n      Thus, spraying should only be considered after considering the likelihood of the disease being present.\n      When the model indicates a high risk of infection, spraying should be considered given a) the likelihoold of the disease being present,\n      given the time in the season, b) the lettuce variant's resilience towards the disease and c) the time since the last spraying.\n      Normally you don't spray more often than every 10th day, but if the infection risk is considered high over a longer period and \n      actual field observations being made, one can consider a new treatment as early as 7 days since the last spraying.\n    result_parameters:\n      # the id is used with the model_id as the namespace\n      - id: TXD\n        title: Maximum daily temperature\n        description: The maximum daily temperature\n      - id: ELWAST\n        title: Was there enough leaf wetness after sunrise today\n        description: Was there enough leaf wetness after sunrise today\n      - id: ELWASYBST\n        title: Was there enough relative humidity after sunrise yesterday and befor sunrise today\n        description: Was there enough relative humidity after sunrise yesterday and befor sunrise today\n      - id: SLN\n        title: Was there sporulation last night\n        description: Was there sporulation last night\n      - id: SYN\n        title: Was there sporulation yesterday night\n        description: Was there sporulation yesterday night\n      - id: TXD_THRESHOLD\n        title: Max threshold for temperature for infection\n        description: If the max temperature is above this threshold, infection does not occur\n",
							"options": {
								"raw": {
									"language": "text"
								}
							}
						},
						"url": {
							"raw": "{{dss_url}}/rest/schema/dss/yaml/validate",
							"host": [
								"{{dss_url}}"
							],
							"path": [
								"rest",
								"schema",
								"dss",
								"yaml",
								"validate"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Catalogue service",
			"item": [
				{
					"name": "Get list of DSSs",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{dss_url}}/rest/dss",
							"host": [
								"{{dss_url}}"
							],
							"path": [
								"rest",
								"dss"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get one DSS as Json",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Response is Json, and the correct id is present\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.id).to.eql(\"no.nibio.vips\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{dss_url}}/rest/dss/no.nibio.vips",
							"host": [
								"{{dss_url}}"
							],
							"path": [
								"rest",
								"dss",
								"no.nibio.vips"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get input_schema (Json schema) for a DSS model",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Response is Json, and we find the data type of the modelId\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.properties.modelId.type).to.eql(\"string\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{dss_url}}/rest/model/no.nibio.vips/PSILAROBSE/input_schema",
							"host": [
								"{{dss_url}}"
							],
							"path": [
								"rest",
								"model",
								"no.nibio.vips",
								"PSILAROBSE",
								"input_schema"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get input_schema for the HTML form (Json schema) for a DSS model",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Response is Json, and we find the data type of the timeZone\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.properties.configParameters.properties.timeZone.type).to.eql(\"string\");",
									"});",
									"pm.test(\"Response is Json, and the weatherData property should not be present. \", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.properties.weatherData).to.be.undefined;",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{dss_url}}/rest/model/no.nibio.vips/PSILARTEMP/input_schema/ui_form",
							"host": [
								"{{dss_url}}"
							],
							"path": [
								"rest",
								"model",
								"no.nibio.vips",
								"PSILARTEMP",
								"input_schema",
								"ui_form"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get input_schema for the HTML form (Json schema) for a n observation based DSS model",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Response is Json, and we find the data type of the timeZone\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.properties.configParameters.properties.timeZone.type).to.eql(\"string\");",
									"});",
									"pm.test(\"Response is Json, and the weatherData property should not be present. \", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.properties.weatherData).to.be.undefined;",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{dss_url}}/rest/model/no.nibio.vips/PSILARTEMP/input_schema/ui_form",
							"host": [
								"{{dss_url}}"
							],
							"path": [
								"rest",
								"model",
								"no.nibio.vips",
								"PSILARTEMP",
								"input_schema",
								"ui_form"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get one DSS as YAML",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Body contains the correct ID\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"dk.seges\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{dss_url}}/rest/dss/dk.seges/yaml",
							"host": [
								"{{dss_url}}"
							],
							"path": [
								"rest",
								"dss",
								"dk.seges",
								"yaml"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get DSS model(s) for a given crop-pest combination",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Response is Json, and at least one model is present\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0].models.length).gte(1);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{dss_url}}/rest/dss/crop/DAUCS/pest/PSILRO",
							"host": [
								"{{dss_url}}"
							],
							"path": [
								"rest",
								"dss",
								"crop",
								"DAUCS",
								"pest",
								"PSILRO"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get DSS model(s) for a given invalid crop-pest combination",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Response is Json, and zero DSSs are present\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.length).to.eq(0)",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{dss_url}}/rest/dss/crop/FOO/pest/PSILRO",
							"host": [
								"{{dss_url}}"
							],
							"path": [
								"rest",
								"dss",
								"crop",
								"FOO",
								"pest",
								"PSILRO"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get list of EPPO codes for all DSS model pests in the platform",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{dss_url}}/rest/pest",
							"host": [
								"{{dss_url}}"
							],
							"path": [
								"rest",
								"pest"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get list of EPPO codes for all DSS model crops in the platform",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{dss_url}}/rest/crop",
							"host": [
								"{{dss_url}}"
							],
							"path": [
								"rest",
								"crop"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}